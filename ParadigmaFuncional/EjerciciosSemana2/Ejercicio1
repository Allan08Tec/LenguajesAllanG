
module Facturas
    ( main
    ) where

data Producto = Producto { nombre :: String
                    , cantidad :: Int
                    , precio :: Float
                     } deriving Show


listarExistenciaMinima minimo listaProductos =
    filter minimos listaProductos 
    where
        minimos prod = ((cantidad prod) <= minimo) 




--metodo para calcular el precio total de una lista de productos
precioTotal listaProductos = sum (map precioTotalProducto listaProductos)
    where
        precioTotalProducto prod = (precio prod) * (fromIntegral (cantidad prod))
    


--metodo para calcular el precio total de una lista de productos con el 13% de impuestos 
--a los productos que tengan un precio mayor a 10000

precioTotalImpuestos listaProductos = sum (map precioTotalProductoImpuestos listaProductos)
    where
        precioTotalProductoImpuestos prod = (precio prod) * (fromIntegral (cantidad prod)) * (if (precio prod) > 10000 then 1.13 else 1)

main :: IO ()
main = do
    let listaProductos=[
            (Producto "arroz" 15 2500),
            (Producto "frijoles" 4 2000),
            (Producto "leche" 8 1200),
            (Producto "cafe" 12 4500),
            (Producto "azucar" 20 1000),
            (Producto "sal" 30 500)]
    --print(listarExistenciaMinima 10 listaProductos)
    

    
    --imprimir el monto total de la compra sin impuestos
    print(precioTotal listaProductos)
    --imprimir el monto total de la compra con impuestos
    print(precioTotalImpuestos listaProductos)
    

--resultado
--  15000.0
--  16500.0
