
b.	Crear una función que ordene la lista de productos usando como llave para el ordenamiento cualquiera de los elementos 
de la estructura producto. La lista/slice debe quedar modificada al finalizar el método. 
Se solicita investigar y hacer uso de alguna función predefinida de alguna librería del lenguaje Go.


//proyecto base
package main

import (
	"fmt"
)

type producto struct {
	nombre   string
	cantidad int
	precio   int
}
type listaProductos []producto

var lProductos listaProductos
var listaProductosMinimos listaProductos

const existenciaMinima int = 10 //La existencia mínima es el número mínimo debajo del cual se deben tomar eventuales decisiones

func (l *listaProductos) buscarProducto(nombre string) int { //el retorno es el índice del producto encontrado y -1 si no existe
	var result = -1
	var i int
	for i = 0; i < len(*l); i++ {
		if (*l)[i].nombre == nombre {
			result = i
		}
	}
	return result
}

func (l *listaProductos) agregarProducto(nombre string, cantidad int, precio int) {
	g := (*l).buscarProducto(nombre)
	if g == -1 {
		*l = append(*l, producto{nombre: nombre, cantidad: cantidad, precio: precio})
	} else {
		if (*l)[g].nombre == nombre {
			i := (*l)[g].cantidad + cantidad
			(*l)[g].cantidad = i
			if (*l)[g].precio != precio {
				(*l)[g].precio = precio
			} else {
				k := (*l)[g].precio
				(*l)[g].precio = k
			}
		}
	}
}

func remove(slice listaProductos, s int) listaProductos {
	return append(slice[:s], slice[s+1:]...)
}

func (l *listaProductos) venderProducto(nombre string, cant int) {
	var prod = l.buscarProducto(nombre)
	if prod == -1 {
		println("El zapato no existe, entonces no se puede vender")
	} else if (*l)[prod].cantidad >= cant {
		(*l)[prod].cantidad = (*l)[prod].cantidad - cant
		println("Producto vendido con éxito")
	} else if (*l)[prod].cantidad == 0 {
		println("No hay productos disponibles en el inventario")
		remove(*l, prod)
	} else {
		println("La venta no puede ser ejecutada ya que no hay suficientes productos en el inventario para vender los solicitados")
	}
}

func (l *listaProductos) listarProductosMínimos() listaProductos {

	for i := 0; i < len(*l); i++ {
		if (*l)[i].cantidad <= existenciaMinima {
			listaProductosMinimos = append(listaProductosMinimos, (*l)[i])
		}
	}
	fmt.Println("Lista de productos con cantidad por debajo del mínimo:\n ", listaProductosMinimos)
	return listaProductosMinimos
}

func llenarDatos() {
	lProductos.agregarProducto("arroz", 15, 2500)
	lProductos.agregarProducto("frijoles", 4, 2000)
	lProductos.agregarProducto("leche", 8, 1200)
	lProductos.agregarProducto("café", 12, 4500)

}

func main() {
	llenarDatos()
	fmt.Println("Lista total de productos: \n", lProductos)
	lProductos.agregarProducto("café", 12, 5500)
	fmt.Println("Cantidad actualizada de café:", lProductos)
	lProductos.venderProducto("café", 4)
	fmt.Println(lProductos)
	lProductos.venderProducto("café", 20)
	fmt.Println(lProductos)
	lProductos.venderProducto("arroz", 4)
	fmt.Println(lProductos)
	lProductos.venderProducto("café", 20)
	fmt.Println(lProductos)
	lProductos.venderProducto("frijoles", 4)
	fmt.Println(lProductos)
	lProductos.venderProducto("leche", 10)
	fmt.Println("---------------------------------------------------------------")

}
